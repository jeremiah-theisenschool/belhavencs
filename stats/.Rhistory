print(Q2)
print(Q3)
print(min)
print(max)
print(IQR)
a2 = c(0, 1, 2, 2, 2, 2, 3, 5, 5, 5, 5, 8, 8, 8, 9, 11, 12, 12, 14, 15, 19, 41, 45, 52, 62, 66)
a2Q1
a2 = c(0, 1, 2, 2, 2, 2, 3, 5, 5, 5, 5, 8, 8, 8, 9, 11, 12, 12, 14, 15, 19, 41, 45, 52, 62, 66)
a2Q2 = median(a2)
a2 = c(0, 1, 2, 2, 2, 2, 3, 5, 5, 5, 5, 8, 8, 8, 9, 11, 12, 12, 14, 15, 19, 41, 45, 52, 62, 66)
a2Q2 = median(a2)
print(a2Q2)
a2 = c(0, 1, 2, 2, 2, 2, 3, 5, 5, 5, 5, 8, 8, 8, 9, 11, 12, 12, 14, 15, 19, 41, 45, 52, 62, 66)
a2h1 = c(0, 1, 2, 2, 2, 2, 3, 5, 5, 5, 5, 8, 8)
a2h2 = c( 8, 9, 11, 12, 12, 14, 15, 19, 41, 45, 52, 62, 66)
a2Q1 = median(a2h1)
a2Q2 = median(a2)
a2Q3 = median(a2h2)
min = 0
max = 66
print(a2Q1)
print(a2Q2)
print(a2Q3)
print(min)
print(max)
summary(ncbirths$weight)
boxplot(ncbirths$weight)
summary(ncbirths$weight)
boxplot(ncbirths$mage)
summary(ncbirths$mage)
boxplot(ncbirths$weight)
ncbirths = read.csv("https://github.com/TienChih/tbil-stats/raw/main/data/ncbirths.csv")
names(ncbirths)
boxplot(ncbirths$weight~ncbirths$habit)
boxplot(ncbirths$weight~ncbirths$married)
boxplot(ncbirths$weight~ncbirths$habit)
boxplot(ncbirths$weight~ncbirths$marriage)
boxplot(ncbirths$weight~ncbirths$marital)
boxplot(ncbirths$weight~ncbirths$marital)
boxplot(ncbirths$mage~ncbirths$marital)
boxplot(ncbirths$weight~ncbirths$marital)
ncbirths = read.csv("https://github.com/TienChih/tbil-
stats/raw/main/data/ncbirths.csv")
ncbirths = read.csv("https://github.com/TienChih/tbil-stats/raw/main/data/ncbirths.csv")
names(ncbirths)
ncbirths = read.csv("https://github.com/TienChih/tbil-stats/raw/main/data/ncbirths.csv")
names(ncbirths)
print(4)
print(5)
boxplot(ncbirths$weight)
boxplot(ncbirths$weight)
boxplot(ncbirths$weight)
boxplot(ncbirths$weight)
boxplot(ncbirths$weight~ncbirths$marital)
boxplot(ncbirths$weight~ncbirths$marital)
S1=c((1-3),(2-3),(3-3),(4-3),(5-3))
print(S1)
S2=c((1-3)+(2-3)+(3-3)+(4-3)+(5-3))
print(S2)
Orange
names(Orange)
names(Orange)
names(Orange)
Orange
plot(Orange$age, Orange$circumference, main=" Age vs Circumference ", xlab=" Age ", ylab=" circumference ", pch=19)
names(Orange)
print(Orange$Tree)
plot(Orange$age, Orange$circumference, main=" Age vs Circumference ", xlab=" Age ", ylab=" circumference ", pch=19)
hist(Orange$Tree, xlab="FIXME", main="FIXME")
hist(Orange$circumference, xlab="FIXME", main="FIXME")
hist(Orange$circumference, xlab="Circumference", main="Circumference of Orange Trees")
hist(Orange$circumference, xlab="Circumference", main="Circumference of Orange Trees")
names(Orange)
m=mean(Orange$circumference)
md=median(Orange$circumference)
hist(Orange$circumference)
abline(v = m, col = "red")
abline(v = md, col = "blue")
m=mean(Orange$circumference)
md=median(Orange$circumference)
hist(Orange$circumference)
abline(v = m, col = "red")
abline(v = md, col = "blue")
t1 = subset(Orange, Tree=="1")
t1
plot(t1$age, FIXME$circumference, main=" age vs circumference of tree 1 ", xlab=" age ", ylab=" circumference ", pch=19)
plot(t1$age, t1$circumference, main=" age vs circumference of tree 1 ", xlab=" age ", ylab=" circumference ", pch=19)
t1 = subset(Orange, Tree=="1")
t1
plot(t1$age, t1$circumference, main=" age vs circumference of tree 1 ", xlab=" age ", ylab=" circumference ", pch=19)
plot(t1$age, t1$circumference, main=" age vs circumference of tree 1 ", xlab=" age ", ylab=" circumference ", pch=19)
m=mean(Orange$circumference)
s=sd(Orange$circumference)
hist(FOrange$circumference)
m=mean(Orange$circumference)
s=sd(Orange$circumference)
hist(Orange$circumference)
abline(v = m, col = "red")
abline(v = m + s, col = "forestgreen")
abline(v = m - s, col = "forestgreen")
m=mean(Orange$circumference)
md=median(Orange$circumference)
hist(Orange$circumference)
abline(v = m, col = "red")
m=mean(Orange$circumference)
md=median(Orange$circumference)
hist(Orange$circumference)
abline(v = m, col = "red")
abline(v = md, col = "blue")
t1 = subset(Orange, Tree=="1")
t1
plot(t1$age, t1$circumference, main=" age vs circumference of tree 1 ", xlab=" age ", ylab=" circumference ", pch=19)
sd(Orange$circumference)
m=mean(Orange$circumference)
s=sd(Orange$circumference)
hist(Orange$circumference)
abline(v = m, col = "red")
abline(v = m + s, col = "forestgreen")
abline(v = m - s, col = "forestgreen")
m=mean(Orange$circumference)
s=sd(Orange$circumference)
hist(Orange$circumference)
abline(v = m, col = "red")
abline(v = m + s, col = "forestgreen")
abline(v = m - s, col = "forestgreen")
sd(Orange$circumference)
Orange$Tree
Orange$age
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
n=10                #number of die rolls
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
for (i in 1:n){
roll=sample(1:6,1,replace=TRUE)
if (roll==6){
sixes=sixes+1   #increment number of sixes
}
Sixvec[i]=sixes/i #records proportion of sixes so far
}
plot(Sixvec, type="l", ylim=c(0,1)) #plots linegraph of proportion of sixes
abline(h=1/6, col="red", lty=2)     #draw y=1/6 line
n=10                #number of die rolls
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
for (i in 1:n){
roll=sample(1:6,1,replace=TRUE)
if (roll==6){
sixes=sixes+1   #increment number of sixes
}
Sixvec[i]=sixes/i #records proportion of sixes so far
}
plot(Sixvec, type="l", ylim=c(0,1)) #plots linegraph of proportion of sixes
abline(h=1/6, col="red", lty=2)     #draw y=1/6 line
n=10                #number of die rolls
sixes=0             # of sixes rolled so far
for (i in 1:n){
roll=sample(1:6,1,replace=TRUE)
if (roll==6){
sixes=sixes+1   #increment number of sixes
}
Sixvec[i]=sixes/i #records proportion of sixes so far
}
plot(Sixvec, type="l", ylim=c(0,1)) #plots linegraph of proportion of sixes
abline(h=1/6, col="red", lty=2)     #draw y=1/6 line
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
for (i in 1:n){
roll=sample(1:6,1,replace=TRUE)
if (roll==6){
sixes=sixes+1   #increment number of sixes
}
Sixvec[i]=sixes/i #records proportion of sixes so far
}
plot(Sixvec, type="l", ylim=c(0,1)) #plots linegraph of proportion of sixes
abline(h=1/6, col="red", lty=2)     #draw y=1/6 line
n=10000               #number of die rolls
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
for (i in 1:n){
roll=sample(1:6,1,replace=TRUE)
if (roll==6){
sixes=sixes+1   #increment number of sixes
}
Sixvec[i]=sixes/i #records proportion of sixes so far
}
plot(Sixvec, type="l", ylim=c(0,1)) #plots linegraph of proportion of sixes
abline(h=1/6, col="red", lty=2)     #draw y=1/6 line
n=10                #number of die rolls
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
for (i in 1:n){
roll=sample(1:6,1,replace=TRUE)
if (roll==6){
sixes=sixes+1   #increment number of sixes
}
Sixvec[i]=sixes/i #records proportion of sixes so far
}
plot(Sixvec, type="l", ylim=c(0,1)) #plots linegraph of proportion of sixes
abline(h=1/6, col="red", lty=2)     #draw y=1/6 line
n=10                #number of die rolls
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
for (i in 1:n){
roll=sample(1:6,1,replace=TRUE)
if (roll==6){
sixes=sixes+1   #increment number of sixes
}
Sixvec[i]=sixes/i #records proportion of sixes so far
}
plot(Sixvec, type="l", ylim=c(0,1)) #plots linegraph of proportion of sixes
abline(h=1/6, col="red", lty=2)     #draw y=1/6 line
n=10                #number of die rolls
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
for (i in 1:n){
roll=sample(1:6,1,replace=TRUE)
if (roll==6){
sixes=sixes+1   #increment number of sixes
}
}
plot(Sixvec, type="l", ylim=c(0,1)) #plots linegraph of proportion of sixes
abline(h=1/6, col="red", lty=2)     #draw y=1/6 line
n=10                #number of die rolls
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
for (i in 1:n){
roll=sample(1:6,1,replace=TRUE)
if (roll==6){
sixes=sixes+1   #increment number of sixes
}
Sixvec[i]=sixes/i #records proportion of sixes so far
}
n=100               #number of die rolls
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
for (i in 1:n){
roll=sample(1:6,1,replace=TRUE)
if (roll==6){
sixes=sixes+1   #increment number of sixes
}
Sixvec[i]=sixes/i #records proportion of sixes so far
}
plot(Sixvec, type="l", ylim=c(0,1)) #plots linegraph of proportion of sixes
abline(h=1/6, col="red", lty=2)     #draw y=1/6 line
n=10                #number of die rolls
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
for (i in 1:n){
roll=sample(1:6,1,replace=TRUE)
if (roll==6){
sixes=sixes+1   #increment number of sixes
}
Sixvec[i]=sixes/i #records proportion of sixes so far
plot(Sixvec, type="l", ylim=c(0,1)) #plots linegraph of proportion of sixes
abline(h=1/6, col="red", lty=2)     #draw y=1/6 line
roll=sample(1:6,20,replace=TRUE)
roll
loans = read.csv("https://github.com/TienChih/tbil-stats/raw/main/data/loans_full_schema.csv")
names(loans)
n=10                #number of die rolls
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
roll=sample(1:6,1,replace=TRUE)
if (roll==6){
sixes=sixes+1   #increment number of sixes
}
Sixvec[i]=sixes/i #records proportion of sixes so far
}
length(which(loans$application_type=="joint"))
length(which(loans$homeownership=="MORTGAGE"))
length(which(loans$application_type=="joint" & loans$homeownership=="MORTGAGE"))
index = sample(1:nrow(loans), 1000)
samp=loans[index,]
index = sample(1:nrow(loans), 1000)
samp=loans[index,]
names(samp)
table(samp$application_type,samp$homeownership)
length(which(loans$state=="MS"))
length(which(loans$state=="MS" & loans$issue_month=="Jan-2018"))
index = sample(1:nrow(loans), 1000)
samp=loans[index,]
table(samp$state,samp$month)
index = sample(1:nrow(loans), 1000)
samp=loans[index,]
table(samp$state,samp$month)
index = sample(1:nrow(loans), 1000)
samp=loans[index,]
table(samp$state,samp$month)
index = sample(1:nrow(loans), 1000)
samp=loans[index,]
table(samp$state,samp$issue_month)
n=10                #number of die rolls
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
for (i in 1:n){
if (roll==6){
sixes=sixes+1   #increment number of sixes
}
Sixvec[i]=sixes/i #records proportion of sixes so far
}
abline(h=1/6, col="red", lty=2)     #draw y=1/6 line
n=10                #number of die rolls
sixes=0             # of sixes rolled so far
Sixvec=rep(NA, n) #proportion of sixes rolled
roll=sample(1:6,1,replace=TRUE)
if (roll==6){
sixes=sixes+1   #increment number of sixes
}
Sixvec[i]=sixes/i #records proportion of sixes so far
}
n=10                #number of die rolls
sixes=0             # of sixes rolled so far
icecream_n=80
icecream_p=0.6
icecream_samp=sample(c("TOPPINGS", "NO"), icecream_n, replace=TRUE, prob=c(icecream_p, 1-icecream_p))
length(which(icecream_samp=="TOPPINGS"))
icecream_prop=length(which(icecream_samp=="TOPPINGS"))/icecream_n
frozen_n=110
frozen_p=0.45
frozen_samp=sample(c("TOPPINGS", "NO"), frozen_n, replace=TRUE, prob=c(frozen_p, 1-frozen_p))
length(which(frozen_samp=="TOPPINGS"))
frozen_prop=length(which(frozen_samp=="TOPPINGS"))/frozen_n
icecream_prop-frozen_prop
prop_diff=rep(NA,1000)
for(i in 1:1000){
icecream_samp=sample(c("TOPPINGS", "NO"), icecream_n, replace=TRUE, prob=c(icecream_p, 1-icecream_p))
icecream_prop=length(which(icecream_samp=="TOPPINGS"))/icecream_n
frozen_samp=sample(c("TOPPINGS", "NO"), frozen_n, replace=TRUE, prob=c(frozen_p, 1-frozen_p))
frozen_prop=length(which(frozen_samp=="TOPPINGS"))/frozen_n
prop_diff[i]=icecream_prop-frozen_prop
prop_diff=rep(NA,1000)
for(i in 1:1000){
icecream_samp=sample(c("TOPPINGS", "NO"), icecream_n, replace=TRUE, prob=c(icecream_p, 1-icecream_p))
icecream_prop=length(which(icecream_samp=="TOPPINGS"))/icecream_n
frozen_samp=sample(c("TOPPINGS", "NO"), frozen_n, replace=TRUE, prob=c(frozen_p, 1-frozen_p))
frozen_prop=length(which(frozen_samp=="TOPPINGS"))/frozen_n
prop_diff[i]=icecream_prop-frozen_prop
prop_diff=rep(NA,1000)
for(i in 1:1000){
icecream_samp=sample(c("TOPPINGS", "NO"), icecream_n, replace=TRUE, prob=c(icecream_p, 1-icecream_p))
icecream_prop=length(which(icecream_samp=="TOPPINGS"))/icecream_n
frozen_samp=sample(c("TOPPINGS", "NO"), frozen_n, replace=TRUE, prob=c(frozen_p, 1-frozen_p))
frozen_prop=length(which(frozen_samp=="TOPPINGS"))/frozen_n
prop_diff[i]=icecream_prop-frozen_prop
}
prop_diff=rep(NA,1000)
for(i in 1:1000){
icecream_samp=sample(c("TOPPINGS", "NO"), icecream_n, replace=TRUE, prob=c(icecream_p, 1-icecream_p))
icecream_prop=length(which(icecream_samp=="TOPPINGS"))/icecream_n
frozen_samp=sample(c("TOPPINGS", "NO"), frozen_n, replace=TRUE, prob=c(frozen_p, 1-frozen_p))
frozen_prop=length(which(frozen_samp=="TOPPINGS"))/frozen_n
prop_diff[i]=icecream_prop-frozen_prop
}
prop_diff=rep(NA,1000)
for(i in 1:1000){
icecream_samp=sample(c("TOPPINGS", "NO"), icecream_n, replace=TRUE, prob=c(icecream_p, 1-icecream_p))
icecream_prop=length(which(icecream_samp=="TOPPINGS"))/icecream_n
frozen_samp=sample(c("TOPPINGS", "NO"), frozen_n, replace=TRUE, prob=c(frozen_p, 1-frozen_p))
frozen_prop=length(which(frozen_samp=="TOPPINGS"))/frozen_n
prop_diff[i]=icecream_prop-frozen_prop
}
prop_diff=rep(NA,1000)
for(i in 1:1000){
icecream_samp=sample(c("TOPPINGS", "NO"), icecream_n, replace=TRUE, prob=c(icecream_p, 1-icecream_p))
icecream_prop=length(which(icecream_samp=="TOPPINGS"))/icecream_n
frozen_samp=sample(c("TOPPINGS", "NO"), frozen_n, replace=TRUE, prob=c(frozen_p, 1-frozen_p))
frozen_prop=length(which(frozen_samp=="TOPPINGS"))/frozen_n
prop_diff[i]=icecream_prop-frozen_prop
}
hist(prop_diff, breaks=25, prob=TRUE)
mu_D=0.45
SE_D=0.0724
hist(prop_diff, breaks=25, prob=TRUE)
curve(dnorm(x, mean=mu_D, sd=SE_D), col="darkblue", lwd=2, add=TRUE, yaxt="n")
mu_D=0.15
SE_D=0.0724
hist(prop_diff, breaks=25, prob=TRUE)
curve(dnorm(x, mean=mu_D, sd=SE_D), col="darkblue", lwd=2, add=TRUE, yaxt="n")
eastpoll=100
east_p=sample(c(0.3, 0.4, 0.5), 1, prob=c(0.25, 0.5, 0.25))
east_samp=sample(c("SPICYWINGS", "NO"), eastpoll, replace=TRUE, prob=c(east_p, 1-east_p))
east_x=length(which(east_samp=="SPICYWINGS"))
westpoll=100
west_p=sample(c(0.3, 0.4, 0.5), 1, prob=c(0.25, 0.5, 0.25))
west_samp=sample(c("SPICYWINGS", "NO"), westpoll, replace=TRUE, prob=c(west_p, 1-west_p))
west_x=length(which(west_samp=="SPICYWINGS"))
eastpoll=100
east_p=sample(c(0.3, 0.4, 0.5), 1, prob=c(0.25, 0.5, 0.25))
east_samp=sample(c("SPICYWINGS", "NO"), eastpoll, replace=TRUE, prob=c(east_p, 1-east_p))
east_x=length(which(east_samp=="SPICYWINGS"))
westpoll=100
west_p=sample(c(0.3, 0.4, 0.5), 1, prob=c(0.25, 0.5, 0.25))
west_samp=sample(c("SPICYWINGS", "NO"), westpoll, replace=TRUE, prob=c(west_p, 1-west_p))
west_x=length(which(west_samp=="SPICYWINGS"))
westpoll=100
west_p=sample(c(0.3, 0.4, 0.5), 1, prob=c(0.25, 0.5, 0.25))
west_samp=sample(c("SPICYWINGS", "NO"), westpoll, replace=TRUE, prob=c(west_p, 1-west_p))
west_x=length(which(west_samp=="SPICYWINGS"))
eastpoll=100
east_p=sample(c(0.3, 0.4, 0.5), 1, prob=c(0.25, 0.5, 0.25))
east_samp=sample(c("SPICYWINGS", "NO"), eastpoll, replace=TRUE, prob=c(east_p, 1-east_p))
east_x=length(which(east_samp=="SPICYWINGS"))
eastpoll=100
east_p=sample(c(0.3, 0.4, 0.5), 1, prob=c(0.25, 0.5, 0.25))
east_samp=sample(c("SPICYWINGS", "NO"), eastpoll, replace=TRUE, prob=c(east_p, 1-east_p))
east_x=length(which(east_samp=="SPICYWINGS"))
eastpoll=100
east_p=sample(c(0.3, 0.4, 0.5), 1, prob=c(0.25, 0.5, 0.25))
east_samp=sample(c("SPICYWINGS", "NO"), eastpoll, replace=TRUE, prob=c(east_p, 1-east_p))
east_x=length(which(east_samp=="SPICYWINGS"))
eastpoll=100
east_p=sample(c(0.3, 0.4, 0.5), 1, prob=c(0.25, 0.5, 0.25))
east_samp=sample(c("SPICYWINGS", "NO"), eastpoll, replace=TRUE, prob=c(east_p, 1-east_p))
east_x=length(which(east_samp=="SPICYWINGS"))
eastpoll=100
east_p=sample(c(0.3, 0.4, 0.5), 1, prob=c(0.25, 0.5, 0.25))
east_samp=sample(c("SPICYWINGS", "NO"), eastpoll, replace=TRUE, prob=c(east_p, 1-east_p))
east_x=length(which(east_samp=="SPICYWINGS"))
eastpoll=100
east_p=sample(c(0.3, 0.4, 0.5), 1, prob=c(0.25, 0.5, 0.25))
east_samp=sample(c("SPICYWINGS", "NO"), eastpoll, replace=TRUE, prob=c(east_p, 1-east_p))
east_x=length(which(east_samp=="SPICYWINGS"))
print(east_x)
westpoll=100
west_p=sample(c(0.3, 0.4, 0.5), 1, prob=c(0.25, 0.5, 0.25))
west_samp=sample(c("SPICYWINGS", "NO"), westpoll, replace=TRUE, prob=c(west_p, 1-west_p))
west_x=length(which(west_samp=="SPICYWINGS"))
print(west_x)
east_phat=east_x/eastpoll
west_phat=west_x/westpoll
d=east_phat-west_phat
SE_D=sqrt(east_phat*(1-east_phat)/eastpoll + west_phat*(1-west_phat)/westpoll)
LB=d-1.645*SE_D
UB=d+1.645*SE_D
print(paste0("Lower Bound: ", LB , ", Upper Bound:", UB))
east_p-west_p
mu_D=0.193
SE_D=0.0349
observed_diff=0.09
hist(diffraise, breaks=25, prob=TRUE)
trials=1000
num_men=312
num_women=216
m_raise=72
w_raise=30
raise_rate=(m_raise+w_raise)/(num_men+num_women)
diffraise=rep(NA, trials)
for(i in 1:trials){
menraise=sample(c("RAISE", "NO"), num_men, replace=TRUE, prob=c(raise_rate, 1-raise_rate))
womenraise=sample(c("RAISE", "NO"), num_women, replace=TRUE, prob=c(raise_rate, 1-raise_rate))
diffraise[i]=length(which(menraise=="RAISE"))/num_men-length(which(womenraise=="RAISE"))/num_women
}
hist(diffraise, breaks=25, prob=TRUE)
mu_D=0.193
SE_D=0.0349
observed_diff=0.09
hist(diffraise, breaks=25, prob=TRUE)
curve(dnorm(x, mean=mu_D, sd=SE_D), col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v = observed_diff, col="red", lwd=3, lty=2)
length(which(diffraise>=observed_diff))/trials
mu_D=0
SE_D=0.0349
observed_diff=0.09
hist(diffraise, breaks=25, prob=TRUE)
curve(dnorm(x, mean=mu_D, sd=SE_D), col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v = observed_diff, col="red", lwd=3, lty=2)
trials=1000
num_men=312
num_women=216
m_raise=72
w_raise=30
raise_rate=(m_raise+w_raise)/(num_men+num_women)
diffraise=rep(NA, trials)
for(i in 1:trials){
menraise=sample(c("RAISE", "NO"), num_men, replace=TRUE, prob=c(raise_rate, 1-raise_rate))
womenraise=sample(c("RAISE", "NO"), num_women, replace=TRUE, prob=c(raise_rate, 1-raise_rate))
diffraise[i]=length(which(menraise=="RAISE"))/num_men-length(which(womenraise=="RAISE"))/num_women
}
hist(diffraise, breaks=25, prob=TRUE)
pnorm(0.09, mean=0, sd=0.0349)
1 - pnorm(0.09, mean=0, sd=0.0349)
1 - pnorm(0.141, mean=0, sd=0.5)
pnorm(0.09, mean=0, sd=0.5)
1 - pnorm(0.141, mean=0, sd=1)
pnorm(0.09, mean=0, sd=1)
1 - pnorm(0.141, mean=0, sd=1)
pnorm(0.141, mean=0, sd=1)
1 - pnorm(2.5787, mean=0, sd=1)
pnorm(2.5787, mean=0, sd=1)
trials=1000
num_men=312
num_women=216
m_raise=72
w_raise=30
raise_rate=(m_raise+w_raise)/(num_men+num_women)
diffraise=rep(NA, trials)
for(i in 1:trials){
menraise=sample(c("RAISE", "NO"), num_men, replace=TRUE, prob=c(raise_rate, 1-raise_rate))
womenraise=sample(c("RAISE", "NO"), num_women, replace=TRUE, prob=c(raise_rate, 1-raise_rate))
diffraise[i]=length(which(menraise=="RAISE"))/num_men-length(which(womenraise=="RAISE"))/num_women
}
hist(diffraise, breaks=25, prob=TRUE)
mu_D=0
SE_D=0.0349
observed_diff=0.09
hist(diffraise, breaks=25, prob=TRUE)
curve(dnorm(x, mean=mu_D, sd=SE_D), col="darkblue", lwd=2, add=TRUE, yaxt="n")
abline(v = observed_diff, col="red", lwd=3, lty=2)
length(which(diffraise>=observed_diff))/trials
